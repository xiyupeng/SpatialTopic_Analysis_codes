---
title: "Method Comparison on nanostring dataset"
format: html
editor: visual
---

Note: store results from different software in the same object

## Nanostring Non-small Cell Lung Cancer

```{r}
library(Seurat)
library(ggplot2)
load("~/Documents/Research/github/SpaTopic_benchmarking/data/nanostring_example_lung5-1/nanostring_example_with_result.rdata")
palatte<- c("#0000FFFF","#FF0000FF","#00FF00FF","#009FFFFF","#FF00B6FF","#005300FF","#FFD300FF")
options(future.globals.maxSize = 2 * 1024^3)
```

```{r,eval=FALSE}
## prepare input file for utga, spatialLDA and cytoCommunity

### prepare for spatialLDA input
coords <- GetTissueCoordinates(nano.obj, which = "centroids")
group.by = "predicted.annotation.l1"
image = "image1"
cells <- coords$cell
rownames(coords) <- cells
coords <- as.matrix(coords[, c("x", "y")])
data_select<-as.data.frame(cbind(image, coords[,1], coords[,2], nano.obj[[group.by]]))
colnames(data_select)<-c("image","X","Y","type")
write.csv(data_select,file = "~/Documents/Research/github/SpaTopic_benchmarking/data/nanostring_example_lung5-1/data_spatial_lda_lung5-1.csv", row.names = FALSE)

### prepare for utag input
expression_data<-GetAssayData(nano.obj, assay = "Nanostring", slot = "counts")
expression_data<-t(as.matrix(expression_data))
expression_data<-as.data.frame(cbind(data_select,expression_data))
write.csv(expression_data,file = "~/Documents/Research/github/SpaTopic_benchmarking/data/nanostring_example_lung5-1/data_utag_lung5-1.csv", row.names = FALSE)

### prepare for cytocommunity input
write.table(nano.obj$predicted.annotation.l1, file = "~/Documents/Research/github/SpaTopic_benchmarking/data/nanostring_example_lung5-1/image1_CellTypeLabel.txt",quote = FALSE, row.names = FALSE,col.names = FALSE)
coords <- GetTissueCoordinates(nano.obj, which = "centroids")
write.table(coords[,1:2], file = "~/Documents/Research/github/SpaTopic_benchmarking/data/nanostring_example_lung5-1/image1_Coordinates.txt",quote = FALSE, row.names = FALSE,col.names = FALSE,sep = "\t")
```

### SpaTopic

```{r,eval=FALSE}
library(SpaTopic)
library(sf)
dataset_spa<-Seurat5obj_to_SpaTopic(object = nano.obj, group.by = "predicted.annotation.l1",image = "image1")
system.time(gibbs.res<-SpaTopic_inference(dataset_spa, ntopics = 7, sigma = 50, region_radius = 400, burnin = 2000))
# number of cells per region on average:
# 103.140061791967
## visualization
prob<-as.matrix(gibbs.res$Z.trace)
nano.obj$Topic<-as.factor(apply(prob,1,which.max))
ImageDimPlot(nano.obj, fov = "lung5.rep1", group.by = "Topic", axes = TRUE, 
                           dark.background = T,cols = palatte) + ggtitle("Topic") 
save(gibbs.res,file = "~/Documents/Research/github/SpaTopic_benchmarking/data/nanostring_example_lung5-1/gibbs.res.rdata")
```

### Seurat v5

```{r,eval=FALSE}
library(Seurat)
system.time(nano.obj <- BuildNicheAssay(object = nano.obj, "lung5.rep1", group.by = "predicted.annotation.l1", niches.k = 7, neighbors.k = 100))
## visualization
ImageDimPlot(nano.obj, fov = "lung5.rep1", group.by = "niches", axes = TRUE, 
                           dark.background = T,cols = palatte) + ggtitle("Niches")
```

### Banksy

```{r,eval=FALSE}
library(Banksy)
library(SummarizedExperiment)
library(SpatialExperiment)
library(scuttle)

library(cowplot)
library(ggplot2)

expression_data<-GetAssayData(nano.obj, assay = "Nanostring", slot = "counts")
coords <- GetTissueCoordinates(nano.obj, which = "centroids")
group.by = "predicted.annotation.l1"
image = "image1"
cells <- coords$cell
rownames(coords) <- cells
coords <- as.matrix(coords[, c("x", "y")])
se <- SpatialExperiment(assay = list(counts = expression_data), spatialCoords = coords, colData = coords)
```

```{r,eval=FALSE}
# Normalization to mean library size
se <- computeLibraryFactors(se)
aname <- "normcounts"
assay(se, aname) <- normalizeCounts(se, log = FALSE)
```

```{r,eval=FALSE}
lambda <- 0.8
k_geom <- 30
npcs <- 50
system.time(se <- Banksy::computeBanksy(se, assay_name = aname, k_geom = k_geom))

set.seed(1000)
system.time(se <- Banksy::runBanksyPCA(se, lambda = lambda, npcs = npcs))

set.seed(1000)
system.time(se <- Banksy::clusterBanksy(se, lambda = lambda, npcs = npcs, resolution = c(0.1,0.2,0.3,0.5)))

nano.obj$domain_BankSY<-as.factor(se$clust_M0_lam0.8_k50_res0.5)
```

```{r,eval=FALSE}
ImageDimPlot(nano.obj, fov = "lung5.rep1", group.by = "domain_BankSY", axes = TRUE, dark.background = T,cols = "glasbey") + ggtitle("Topic")
```

```{r,eval=FALSE}
cnames <- colnames(colData(se))
cnames <- cnames[grep("^clust", cnames)]

library(scater)
plotColData(se, x = "x", y = "y", point_size = 0.01, colour_by = cnames[1]) +
    scale_color_manual(values = pals::glasbey()) +
    coord_equal() +
    theme(legend.position = "none")
```

### Spatial LDA

featurize_sample CPU times: user 30.9 s, sys: 198 ms, total: 31.1 s Wall time: 31 s

Spatial LDA CPU times: user 5h 18min 34s, sys: 11h 50min 51s, total: 17h 9min 25s Wall time: 3h 34min 31s

We already set the convergence threshold of ADDM 0.01 to accelerate convergence otherwise some errors

```{r,eval=FALSE}
library(ggplot2)
#### read the pre-stored spatial_LDA result (previously run in Python)
tw_spatial_lda<-read.csv("/Users/xiyupeng/Documents/Research/github/SpaTopic_benchmarking/methods/spatial_lda/train_model/K7_spatial_lda_nanostring_topicweights_v2.csv")
topic<-apply(tw_spatial_lda,1,which.max)
nano.obj$topic_spatial_LDA<-as.factor(topic)
ImageDimPlot(nano.obj, fov = "lung5.rep1", group.by = "topic_spatial_LDA", axes = TRUE, 
                           dark.background = T,cols = palatte) + ggtitle("Topic")
```

### UTAG

Use more than 200G memory but generally runs fast.

```{r,eval=FALSE}
## read Seurat object from h5ad2
utag = schard::h5ad2seurat('/Users/xiyupeng/Documents/Research/github/SpaTopic_benchmarking/data/nanostring_example_lung5-1/lung_utag_result.h5ad')
utag_result<-utag@meta.data[,grep("UTAG",colnames(utag@meta.data))]
colnames(utag_result)
nano.obj$utag_domain<-as.factor(utag_result$`UTAG Label_leiden_0.2`)
ImageDimPlot(nano.obj, fov = "lung5.rep1", group.by = "utag_domain", axes = TRUE, 
                           dark.background = T,cols = "glasbey") + ggtitle("Topic")
```

### CytoCommunity

9 hrs for 100 \* 3 epoche. Use about 190 GB memory.

```{r,eval=FALSE}
cytoCommunity <-scan(file = "/Users/xiyupeng/Documents/Research/github/SpaTopic_benchmarking/data/nanostring_example_lung5-1/TCNLabel_MajorityVoting_10run.csv")
nano.obj$CytoCommunity<-as.factor(cytoCommunity)
ImageDimPlot(nano.obj, fov = "lung5.rep1", group.by = "CytoCommunity", axes = TRUE, 
                           dark.background = T,cols = "glasbey") + ggtitle("TCN")
```

### Save Data

```{r,eval=FALSE}
save(nano.obj, file = "~/Documents/Research/github/SpaTopic_benchmarking/data/nanostring_example_lung5-1/nanostring_example_with_result.rdata")
```

### Visualization

```{r}
## marker basal as tumor cells
nano.obj$celltype<-nano.obj$predicted.annotation.l1
nano.obj$celltype[nano.obj$celltype == "Basal"]<-"Tumor"
Idents(nano.obj) <- nano.obj$celltype
```

-   Compare SpaTopic to other five methods

whole image

```{r}
library(Polychrome)
nano.obj$niches<-as.factor(nano.obj$niches)
names(palatte)<-1:7
palatte_utag<-glasbey.colors(7)
names(palatte_utag)<--1:5
palatte_banksy<-glasbey.colors(13)
names(palatte_banksy)<-0:12
nano.obj$niches<-as.factor(nano.obj$niches)
ImageDimPlot(nano.obj, fov = "lung5.rep1", group.by = "Topic", axes = FALSE, 
                           dark.background = F,cols = palatte) + ggtitle("SpatialTopic")
ImageDimPlot(nano.obj, fov = "lung5.rep1", group.by = "niches",  axes = FALSE, 
                           dark.background = F,cols = palatte) + ggtitle("Seurat v5")
ImageDimPlot(nano.obj, fov = "lung5.rep1", group.by = "domain_BankSY", axes = FALSE, 
                           dark.background = F,cols = palatte_banksy) + ggtitle("BankSY")
ImageDimPlot(nano.obj, fov = "lung5.rep1", group.by = "topic_spatial_LDA",axes = FALSE, 
                           dark.background = F,cols = palatte) + ggtitle("Spatial-LDA")
ImageDimPlot(nano.obj, fov = "lung5.rep1", group.by = "utag_domain",axes = FALSE, 
                           dark.background = F,cols = palatte_utag) + ggtitle("UTAG")
ImageDimPlot(nano.obj, fov = "lung5.rep1", group.by = "CytoCommunity", axes = FALSE,  
                           dark.background = F,cols = palatte) + ggtitle("CytoCommunity")
```

Crop a region (tumor region 1)

```{r,fig.height=1.5,fig.height=3.5}
basal.crop <- Crop(nano.obj[["lung5.rep1"]], x = c(160000,170000), y = c(8000,12000))
nano.obj[["zoom1"]] <- basal.crop
ImageDimPlot(nano.obj, fov = "zoom1", cols = "glasbey", coord.fixed = FALSE,dark.background = F,size = 1.5,cells = WhichCells(nano.obj, idents = c("Tumor", "Macrophage","B","Smooth Muscle", "CD4 T","Dendritic","Myofibroblast",  "CD14+ Monocyte", "Plasma","CD8 T")))+NoLegend()+ggtitle("Celltype")
ImageDimPlot(nano.obj, fov = "zoom1", size = 1.5,cols = palatte, dark.background = F,coord.fixed = FALSE,group.by = "Topic")+NoLegend()+ggtitle("SpatialTopic")
ImageDimPlot(nano.obj, fov = "zoom1", size = 1.5, cols = palatte, dark.background = F,coord.fixed = FALSE,group.by = "niches")+NoLegend()+ggtitle("Seurat v5")
ImageDimPlot(nano.obj, fov = "zoom1", size = 1.5, cols = palatte_banksy, dark.background = F,coord.fixed = FALSE,group.by = "domain_BankSY")+NoLegend()+ ggtitle("BankSY")
ImageDimPlot(nano.obj, fov = "zoom1", size = 1.5, cols = palatte, dark.background = F,coord.fixed = FALSE,group.by = "topic_spatial_LDA")+NoLegend()+ ggtitle("Spatial-LDA")
ImageDimPlot(nano.obj, fov = "zoom1", size = 1.5, cols = palatte_utag, dark.background = F,coord.fixed = FALSE,group.by = "utag_domain")+NoLegend()+ ggtitle("UTAG")
ImageDimPlot(nano.obj, fov = "zoom1", size = 1.5, cols = palatte, dark.background = F,coord.fixed = FALSE,group.by = "CytoCommunity")+NoLegend()+ggtitle("CytoCommunity")
```

```{r,fig.height=1.5,fig.height=3.5}
DefaultBoundary(nano.obj[["zoom1"]]) <- "segmentation"
ImageDimPlot(nano.obj, fov = "zoom1", alpha = 0.3, cols = "polychrome", molecules = c("KRT17"), mols.size = 0.3, nmols = 20000, border.color = "black", coord.fixed = FALSE,dark.background = F)+NoLegend()+ggtitle("KRT17")
```

Crop a region (tumor region 2)

```{r,fig.width=4,fig.height=9}
basal.crop <- Crop(nano.obj[["lung5.rep1"]], x = c(173000,177000), y = c(5000,14000))
nano.obj[["zoom1b"]] <- basal.crop
ImageDimPlot(nano.obj, fov = "zoom1b", cols = "glasbey", coord.fixed = FALSE,dark.background = F,size = 1.5,cells = WhichCells(nano.obj, idents = c("Tumor", "Macrophage","B","Smooth Muscle", "CD4 T","Dendritic","Myofibroblast",  "CD14+ Monocyte", "Plasma","CD8 T")))+NoLegend()+ggtitle("Celltype")
ImageDimPlot(nano.obj, fov = "zoom1b", size = 1.5,cols = palatte, dark.background = F,coord.fixed = FALSE,group.by = "Topic")+NoLegend()+ggtitle("SpatialTopic")
ImageDimPlot(nano.obj, fov = "zoom1b", size = 1.5, cols = palatte, dark.background = F,coord.fixed = FALSE,group.by = "niches")+NoLegend()+ggtitle("Seurat v5")
ImageDimPlot(nano.obj, fov = "zoom1b", size = 1.5, cols = palatte_banksy, dark.background = F,coord.fixed = FALSE,group.by = "domain_BankSY")+NoLegend()+ ggtitle("BankSY")
ImageDimPlot(nano.obj, fov = "zoom1b", size = 1.5, cols = palatte, dark.background = F,coord.fixed = FALSE,group.by = "topic_spatial_LDA")+NoLegend()+ ggtitle("Spatial-LDA")
ImageDimPlot(nano.obj, fov = "zoom1b", size = 1.5, cols = palatte_utag, dark.background = F,coord.fixed = FALSE,group.by = "utag_domain")+NoLegend()+ ggtitle("UTAG")
ImageDimPlot(nano.obj, fov = "zoom1b", size = 1.5, cols = palatte, dark.background = F,coord.fixed = FALSE,group.by = "CytoCommunity")+NoLegend()+ggtitle("CytoCommunity")
```

```{r,fig.width=4}
DefaultBoundary(nano.obj[["zoom1b"]]) <- "segmentation"
ImageDimPlot(nano.obj, fov = "zoom1b", alpha = 0.3, cols = "polychrome", molecules = c("KRT17"), mols.size = 0.3, nmols = 20000, border.color = "black", coord.fixed = FALSE,dark.background = F)+NoLegend()+ggtitle("KRT17")
```

Consistency score between the two regions

```{r}
### KRT expression (at least 1) to topic, niches, domain_BankSY, topic_spatial_LDA, utag_domain, CytoCommunity
DefaultAssay(nano.obj) <- "Nanostring"
D <- colnames(subset(nano.obj, subset = KRT17 > 0, slot = "counts"))
nano.obj$KRT17_exp<-as.factor(ifelse(colnames(nano.obj) %in% D, 1, 0))
table(nano.obj$KRT17_exp,nano.obj$Topic)
crop1 <- Crop(nano.obj[["lung5.rep1"]], x = c(173000,177000), y = c(5000,14000))
crop2 <- Crop(nano.obj[["lung5.rep1"]], x = c(160000,170000), y = c(8000,12000))

calc_perc<-function(evaluate,KRT_exp){
    conti_table<-table(KRT_exp,evaluate)
    topic<-names(which.max(conti_table[2,]))
    conti_table[,topic]/ sum(conti_table[,topic])
}
## Compare data
X<-FetchData(nano.obj,var = c("Topic","niches","domain_BankSY","topic_spatial_LDA","utag_domain","CytoCommunity"))
data<-apply(X, 2, calc_perc,KRT_exp = nano.obj$KRT17_exp)
data.df<-data.frame(Method = colnames(data),Consistency = as.numeric(data[2,]))
data.df

## rename the method
data.df$Method<-as.factor(c("SpatialTopic", "Seurat-v5", "BankSY", "Spatial-LDA", "UTAG", "CytoCommunity"))
data.df$Method <- factor(data.df$Method, levels = c("SpatialTopic", "Seurat-v5", "BankSY", "UTAG", "Spatial-LDA", "CytoCommunity"))


library(ggsci)
my_color<- pal_npg("nrc", alpha = 0.9)(6)
# Plot the data using ggplot2
library(ggpubr)
ggbarplot(data.df, "Method","Consistency",fill = "Method",xlab = "Method",ylab = "Consistency (KRT17+ vs tumor region)",palette= my_color,legend = "right")+theme(axis.text.x = element_text(angle = 45, hjust = 1))+ geom_hline(yintercept = 0.8, linetype = "dashed", color = "black") +scale_y_continuous(breaks = c(0, 0.2, 0.4, 0.6, 0.8)) 
```

Spatial Marker

```{r}
ImageDimPlot(nano.obj, fov = "lung5.rep1", axes = FALSE,  dark.background = F,size = 0.6)+ ggtitle("Celltype")
ImageDimPlot(nano.obj, fov = "lung5.rep1", cells = WhichCells(nano.obj, idents = c("Tumor", "Macrophage","B","Smooth Muscle", "CD4 T","Dendritic","Myofibroblast",  "CD14+ Monocyte", "Plasma","CD8 T")), cols = "glasbey", axes = FALSE,  dark.background = F,size = 0.6)+ ggtitle("Celltype")
ImageDimPlot(nano.obj, fov = "lung5.rep1", group.by = NA, molecules = c("KRT17", "C1QA", "IL7R", "TAGLN","MS4A1"),dark.background = F, axes = FALSE,nmols = 20000, alpha = 0.1,mols.size = 0.01,mols.alpha = 1)+ggtitle("Molecular")
```

```{r}
LN.crop <- Crop(nano.obj[["lung5.rep1"]], x =  c(170000,178000), y = c(27000,31000))
nano.obj[["zoom2"]] <- LN.crop
DefaultBoundary(nano.obj[["zoom2"]]) <- "segmentation"
P1<-ImageDimPlot(nano.obj, fov = "zoom2", group.by = "Topic",dark.background = F, alpha = 1,cols = "glasbey",axes = FALSE)
P2<-ImageDimPlot(nano.obj, fov = "zoom2", group.by = NA,molecules = c("IL7R", "MS4A1"),dark.background = F, nmols = 20000, alpha = 0.1,mols.size = 0.3,mols.alpha = 1,axes = FALSE)
P3<-ImageDimPlot(nano.obj, fov = "zoom2", group.by = "Topic",molecules = c("IL7R", "MS4A1"),dark.background = F, nmols = 20000, alpha = 0.5,mols.size = 0.3,mols.alpha = 1,cols = "glasbey",axes = FALSE)
```

```{r,eval=FALSE}
DefaultAssay(nano.obj) <- "Nanostring"
nano.obj <- NormalizeData(nano.obj, normalization.method = "LogNormalize", scale.factor = 10000)
FindMarkers(nano.obj,ident.1 = "B")
```

```{r,fig.height=8}
DefaultAssay(nano.obj) <- "Nanostring"
DotPlot(nano.obj, features = c("KRT17", "C1QA", "IL7R", "TAGLN","MS4A1")) + RotatedAxis()
```

```{r,fig.height=15}
library(patchwork)
p1<-VlnPlot(nano.obj, features = "KRT17", assay = "Nanostring", layer = "counts", pt.size = 0, y.max = 30) + NoLegend()
p2<-VlnPlot(nano.obj, features = "C1QA", assay = "Nanostring", layer = "counts", pt.size = 0, y.max = 10) +
    NoLegend()
p3<-VlnPlot(nano.obj, features = "IL7R", assay = "Nanostring", layer = "counts", pt.size = 0, y.max = 10) +
    NoLegend()
p4<-VlnPlot(nano.obj, features = "TAGLN", assay = "Nanostring", layer = "counts", pt.size = 0, y.max = 30) +
    NoLegend()
p5<-VlnPlot(nano.obj, features = "MS4A1", assay = "Nanostring", layer = "counts", pt.size = 0, y.max = 10) +
    NoLegend()
wrap_plots(p1,p2,p3,p4,p5,nrow = 5)
```

```{r,fig.height=10,fig.width=4}
p1<-VlnPlot(nano.obj, features = "KRT17", assay = "Nanostring", layer = "counts", pt.size = 0, y.max = 30,group.by = "Topic") + NoLegend()
p2<-VlnPlot(nano.obj, features = "C1QA", assay = "Nanostring", layer = "counts", pt.size = 0, y.max = 10,group.by = "Topic") +
    NoLegend()
p3<-VlnPlot(nano.obj, features = "IL7R", assay = "Nanostring", layer = "counts", pt.size = 0, y.max = 10,group.by = "Topic") +
    NoLegend()
p4<-VlnPlot(nano.obj, features = "TAGLN", assay = "Nanostring", layer = "counts", pt.size = 0, y.max = 30,group.by = "Topic") +
    NoLegend()
p5<-VlnPlot(nano.obj, features = "MS4A1", assay = "Nanostring", layer = "counts", pt.size = 0, y.max = 10,group.by = "Topic") +
    NoLegend()
wrap_plots(p1,p2,p3,p4,p5,nrow = 5)
```

```{r,fig.height=4}
library(RColorBrewer)
load(file = "~/Documents/Research/github/SpaTopic_benchmarking/data/nanostring_example_lung5-1/gibbs.res.rdata")
m <- as.data.frame(gibbs.res$Beta)
rowname<-levels(as.factor(nano.obj$predicted.annotation.l1))
rowname[rowname == "Basal"]<-"Tumor"
colnames(m)<-paste0("topic",1:7)
rownames(m)<-rowname
pheatmap::pheatmap(t(m))

# 
breaksList = seq(0.01, 0.4, by = 0.01)

# Plots the first heatmap
pheatmap::pheatmap(t(m), # Plots the first 10 genes of the dataset
         color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)), # Defines the vector of colors for the legend (it has to be of the same lenght of breaksList)
         breaks = breaksList) # Sets the breaks of the color scale as in breaksList
```

```{r,eval=FALSE}
table(nano.obj$celltype, nano.obj$niches)
table(nano.obj$celltype, nano.obj$Topic)
```

CAF spatial subtypes across different topics

```{r cafsubtype,fig.width=10, fig.height=4,warning=FALSE,message = FALSE}
DefaultAssay(nano.obj) <- "Nanostring"
Idents(nano.obj)<-"predicted.annotation.l1"
## gene list from [Liu et al 2025]
caf_genes <- c("TPM2", "MYH11", "ACTA2", "COL1A1", "TGFB1", "LIF", 
               "COL12A1", "IL6", "HSPA1A", "CFD", "CXCL2", "ENG", 
               "C1QB", "CD74", "CXCL12", "HLA-DPB1", "CCL8", "TAP2")

### we only look at CAF
myofibro_obj <- subset(nano.obj, predicted.annotation.l1 %in% c("Myofibroblast"))
selected_topics <- c("1", "3", "5", "6", "7")
myofibro_filtered <- subset(myofibro_obj, Topic %in% selected_topics)

custom_topic_labels <- c(
  "6" = "Topic6 - s1-CAFs (Tumor adjacent)",
  "7" = "Topic7 - s2-CAFs (Stromal niche)",
  "5" = "Topic5 - s2-CAFs (Stromal niche)",
  "1" = "Topic1 - s3-CAFs (Myeloid niche)",
  "3" = "Topic3 - s4-CAFs (TLS niche)"
)

library(ggplot2)
red_blue_colors <- colorRampPalette(c("blue", "white", "red"))(100)
DotPlot(myofibro_filtered, features = caf_genes, group.by = "Topic") + 
  scale_y_discrete(labels = custom_topic_labels) +
  scale_color_gradientn(colors = red_blue_colors) + 
  RotatedAxis()+  scale_size_continuous(
    range = c(0, 8),  # Min and max dot size
    breaks = c(0, 10, 20, 30, 40, 50, 60, 70),  # Custom breaks
    limits = c(0, 100)  # Set limits to ensure all breaks are included
  ) 
```
